{"ast":null,"code":"// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import jwtDecode from 'jwt-decode';\n//\n// const AuthContext = createContext();\n//\n// export const useAuth = () => {\n//     return useContext(AuthContext);\n// };\n//\n// export const AuthProvider = ({ children }) => {\n//     const [token, setToken] = useState(() => localStorage.getItem('auth_token'));\n//     const [user, setUser] = useState(null);\n//\n//     useEffect(() => {\n//         if (token) {\n//             const decoded = jwtDecode(token);\n//             setUser(decoded);\n//         } else {\n//             setUser(null);\n//         }\n//     }, [token]);\n//\n//     const login = (newToken) => {\n//         localStorage.setItem('auth_token', newToken);\n//         const decoded = jwtDecode(newToken);\n//         setUser(decoded);\n//         setToken(newToken);\n//     };\n//\n//     const logout = () => {\n//         localStorage.removeItem('auth_token');\n//         setToken(null);\n//         setUser(null);\n//     };\n//\n//     const value = {\n//         token,\n//         user,\n//         login,\n//         logout,\n//     };\n//\n//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n// };","map":{"version":3,"names":[],"sources":["C:/Users/kruse/Downloads/Spring-Security-React-App/Spring-Security-React-App/frontend/src/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import jwtDecode from 'jwt-decode';\r\n//\r\n// const AuthContext = createContext();\r\n//\r\n// export const useAuth = () => {\r\n//     return useContext(AuthContext);\r\n// };\r\n//\r\n// export const AuthProvider = ({ children }) => {\r\n//     const [token, setToken] = useState(() => localStorage.getItem('auth_token'));\r\n//     const [user, setUser] = useState(null);\r\n//\r\n//     useEffect(() => {\r\n//         if (token) {\r\n//             const decoded = jwtDecode(token);\r\n//             setUser(decoded);\r\n//         } else {\r\n//             setUser(null);\r\n//         }\r\n//     }, [token]);\r\n//\r\n//     const login = (newToken) => {\r\n//         localStorage.setItem('auth_token', newToken);\r\n//         const decoded = jwtDecode(newToken);\r\n//         setUser(decoded);\r\n//         setToken(newToken);\r\n//     };\r\n//\r\n//     const logout = () => {\r\n//         localStorage.removeItem('auth_token');\r\n//         setToken(null);\r\n//         setUser(null);\r\n//     };\r\n//\r\n//     const value = {\r\n//         token,\r\n//         user,\r\n//         login,\r\n//         logout,\r\n//     };\r\n//\r\n//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n// };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}