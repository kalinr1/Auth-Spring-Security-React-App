{"ast":null,"code":"import LoginButton from\"../components/LoginButton\";import'./LoginPage.css';import{useState}from\"react\";import{Link,useNavigate}from\"react-router-dom\";import{useAuth}from\"../auth/AuthContext\";import{jsx as _jsx}from\"react/jsx-runtime\";const DashboardPage=()=>{return/*#__PURE__*/_jsx(\"div\",{className:\"login-page-container\",children:\"DASHBOARD\"});};export default DashboardPage;//const navigate = useNavigate();\n//\n//     const [email, setEmail] = useState('');\n//     const [password, setPassword] = useState('');\n//     const [emailError, setEmailError] = useState('');\n//     const [passwordError, setPasswordError] = useState('');\n//\n//     const validateEmail = () => {\n//         const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//         if (!emailPattern.test(email)) {\n//             setEmailError('Please enter a valid email address');\n//             return false;\n//         }\n//         return true;\n//     };\n//\n//     const handleLogin = (e) => {\n//         e.preventDefault();\n//         // Reset previous validation errors\n//         setEmailError('');\n//         setPasswordError('');\n//\n//         // Perform validation\n//         let isValid = true;\n//\n//         // Validate email\n//         isValid = validateEmail() && isValid;\n//\n//         if (!password.trim()) {\n//             setPasswordError('Password is required');\n//             isValid = false;\n//         }\n//\n//         // If form is valid, proceed with login\n//         if (isValid) {\n//             // Here you can add your authentication logic\n//             // For simplicity, just redirect to another page after login\n//             navigate('/dashboard');\n//         }\n//     };","map":{"version":3,"names":["LoginButton","useState","Link","useNavigate","useAuth","jsx","_jsx","DashboardPage","className","children"],"sources":["C:/Users/kruse/Downloads/Spring-Security-React-App/Spring-Security-React-App/frontend/src/pages/DashboardPage.js"],"sourcesContent":["import LoginButton from \"../components/LoginButton\";\r\nimport './LoginPage.css'\r\nimport {useState} from \"react\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useAuth} from \"../auth/AuthContext\";\r\n\r\nconst DashboardPage = () => {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"login-page-container\">\r\n            DASHBOARD\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardPage\r\n\r\n\r\n\r\n//const navigate = useNavigate();\r\n//\r\n//     const [email, setEmail] = useState('');\r\n//     const [password, setPassword] = useState('');\r\n//     const [emailError, setEmailError] = useState('');\r\n//     const [passwordError, setPasswordError] = useState('');\r\n//\r\n//     const validateEmail = () => {\r\n//         const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n//         if (!emailPattern.test(email)) {\r\n//             setEmailError('Please enter a valid email address');\r\n//             return false;\r\n//         }\r\n//         return true;\r\n//     };\r\n//\r\n//     const handleLogin = (e) => {\r\n//         e.preventDefault();\r\n//         // Reset previous validation errors\r\n//         setEmailError('');\r\n//         setPasswordError('');\r\n//\r\n//         // Perform validation\r\n//         let isValid = true;\r\n//\r\n//         // Validate email\r\n//         isValid = validateEmail() && isValid;\r\n//\r\n//         if (!password.trim()) {\r\n//             setPasswordError('Password is required');\r\n//             isValid = false;\r\n//         }\r\n//\r\n//         // If form is valid, proceed with login\r\n//         if (isValid) {\r\n//             // Here you can add your authentication logic\r\n//             // For simplicity, just redirect to another page after login\r\n//             navigate('/dashboard');\r\n//         }\r\n//     };"],"mappings":"AAAA,MAAO,CAAAA,WAAW,KAAM,2BAA2B,CACnD,MAAO,iBAAiB,CACxB,OAAQC,QAAQ,KAAO,OAAO,CAC9B,OAAQC,IAAI,CAAEC,WAAW,KAAO,kBAAkB,CAClD,OAAQC,OAAO,KAAO,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5C,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAIxB,mBACID,IAAA,QAAKE,SAAS,CAAC,sBAAsB,CAAAC,QAAA,CAAC,WAEtC,CAAK,CAAC,CAEd,CAAC,CAED,cAAe,CAAAF,aAAa,CAI5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}