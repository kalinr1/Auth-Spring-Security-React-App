{"ast":null,"code":"import LoginButton from\"../components/LoginButton\";import'./LoginPage.css';import{useState}from\"react\";import{Link,useNavigate}from\"react-router-dom\";import{useAuth}from\"../auth/AuthContext\";import Cookies from'js-cookie';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const LoginPage=()=>{const navigate=useNavigate();const{login}=useAuth();const[formState,setFormState]=useState({email:'',password:''});const[errors,setErrors]=useState({});const validateField=(fieldName,value)=>{const emailPattern=/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;switch(fieldName){case'email':return emailPattern.test(value)?'':'Please enter a valid email address';case'password':return value.length>=6?'':'Password must be at least 6 characters long';default:return'';}};const handleSubmit=async e=>{e.preventDefault();setErrors({});const fieldsToValidate=['email','password'];const newErrors={};let isValid=true;fieldsToValidate.forEach(fieldName=>{const fieldError=validateField(fieldName,formState[fieldName]);if(fieldError){newErrors[fieldName]=fieldError;isValid=false;}});if(isValid){try{const response=await fetch('http://localhost:8080/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(formState)});if(response.ok){const data=await response.json();console.log(data);console.log('Login successful');const authTokenCookie=Cookies.get('auth_token');// Do something with the cookie value\nconsole.log(authTokenCookie);login(data.token);navigate(\"/\");}else{const errorData=await response.json();console.error('Login failed:',errorData);const formattedErrors={};errorData.forEach(error=>{formattedErrors[error.field]=error.defaultMessage;});setErrors(formattedErrors);console.log(formattedErrors);}}catch(error){console.error('Error registering:',error);}}else{setErrors(newErrors);}};const handleChange=(fieldName,value)=>{setFormState(prevState=>({...prevState,[fieldName]:value}));};return/*#__PURE__*/_jsxs(\"div\",{className:\"login-page-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Login\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Email\",value:formState.email,onChange:e=>handleChange('email',e.target.value)}),errors.email&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:errors.email}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:formState.password,onChange:e=>handleChange('password',e.target.value)}),errors.password&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:errors.password}),/*#__PURE__*/_jsx(LoginButton,{})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"new-register-now-container\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"New?\"}),/*#__PURE__*/_jsx(Link,{to:\"/register\",children:\"Register now.\"})]})]});};export default LoginPage;//const navigate = useNavigate();\n//\n//     const [email, setEmail] = useState('');\n//     const [password, setPassword] = useState('');\n//     const [emailError, setEmailError] = useState('');\n//     const [passwordError, setPasswordError] = useState('');\n//\n//     const validateEmail = () => {\n//         const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//         if (!emailPattern.test(email)) {\n//             setEmailError('Please enter a valid email address');\n//             return false;\n//         }\n//         return true;\n//     };\n//\n//     const handleLogin = (e) => {\n//         e.preventDefault();\n//         // Reset previous validation errors\n//         setEmailError('');\n//         setPasswordError('');\n//\n//         // Perform validation\n//         let isValid = true;\n//\n//         // Validate email\n//         isValid = validateEmail() && isValid;\n//\n//         if (!password.trim()) {\n//             setPasswordError('Password is required');\n//             isValid = false;\n//         }\n//\n//         // If form is valid, proceed with login\n//         if (isValid) {\n//             // Here you can add your authentication logic\n//             // For simplicity, just redirect to another page after login\n//             navigate('/dashboard');\n//         }\n//     };","map":{"version":3,"names":["LoginButton","useState","Link","useNavigate","useAuth","Cookies","jsx","_jsx","jsxs","_jsxs","LoginPage","navigate","login","formState","setFormState","email","password","errors","setErrors","validateField","fieldName","value","emailPattern","test","length","handleSubmit","e","preventDefault","fieldsToValidate","newErrors","isValid","forEach","fieldError","response","fetch","method","headers","body","JSON","stringify","ok","data","json","console","log","authTokenCookie","get","token","errorData","error","formattedErrors","field","defaultMessage","handleChange","prevState","className","children","onSubmit","type","placeholder","onChange","target","to"],"sources":["C:/Users/kruse/Downloads/Spring-Security-React-App/Spring-Security-React-App/frontend/src/pages/LoginPage.js"],"sourcesContent":["import LoginButton from \"../components/LoginButton\";\r\nimport './LoginPage.css'\r\nimport {useState} from \"react\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useAuth} from \"../auth/AuthContext\";\r\nimport Cookies from 'js-cookie';\r\n\r\nconst LoginPage = () => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const { login } = useAuth();\r\n\r\n    const [formState, setFormState] = useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [errors, setErrors] = useState({});\r\n\r\n\r\n    const validateField = (fieldName, value) => {\r\n        const emailPattern = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\r\n\r\n        switch (fieldName) {\r\n            case 'email':\r\n                return emailPattern.test(value) ? '' : 'Please enter a valid email address';\r\n            case 'password':\r\n                return value.length >= 6 ? '' : 'Password must be at least 6 characters long';\r\n            default:\r\n                return '';\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setErrors({});\r\n\r\n        const fieldsToValidate = ['email', 'password'];\r\n        const newErrors = {};\r\n        let isValid = true;\r\n\r\n        fieldsToValidate.forEach(fieldName => {\r\n            const fieldError = validateField(fieldName, formState[fieldName]);\r\n            if (fieldError) {\r\n                newErrors[fieldName] = fieldError;\r\n                isValid = false;\r\n            }\r\n        });\r\n\r\n        if (isValid) {\r\n            try {\r\n                const response = await fetch('http://localhost:8080/login', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(formState)\r\n                });\r\n\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    console.log(data)\r\n                    console.log('Login successful');\r\n                    const authTokenCookie = Cookies.get('auth_token');\r\n\r\n                    // Do something with the cookie value\r\n                    console.log(authTokenCookie);\r\n                    login(data.token)\r\n                    navigate(\"/\")\r\n                } else {\r\n                    const errorData = await response.json();\r\n                    console.error('Login failed:', errorData);\r\n                    const formattedErrors = {};\r\n                    errorData.forEach(error => {\r\n                        formattedErrors[error.field] = error.defaultMessage;\r\n                    });\r\n                    setErrors(formattedErrors);\r\n                    console.log(formattedErrors)\r\n                }\r\n            } catch (error) {\r\n                console.error('Error registering:', error);\r\n            }\r\n        } else {\r\n            setErrors(newErrors);\r\n        }\r\n    };\r\n\r\n    const handleChange = (fieldName, value) => {\r\n        setFormState(prevState => ({\r\n            ...prevState,\r\n            [fieldName]: value\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-page-container\">\r\n            <h1>Login</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    value={formState.email}\r\n                    onChange={(e) => handleChange('email', e.target.value)}\r\n                />\r\n                {errors.email && <div className=\"error-message\">{errors.email}</div>}\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={formState.password}\r\n                    onChange={(e) => handleChange('password', e.target.value)}\r\n                />\r\n                {errors.password && <div className=\"error-message\">{errors.password}</div>}\r\n                <LoginButton />\r\n            </form>\r\n            <div className={\"new-register-now-container\"}>\r\n                <p>New?</p>\r\n                <Link to={\"/register\"}>Register now.</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginPage\r\n\r\n\r\n\r\n//const navigate = useNavigate();\r\n//\r\n//     const [email, setEmail] = useState('');\r\n//     const [password, setPassword] = useState('');\r\n//     const [emailError, setEmailError] = useState('');\r\n//     const [passwordError, setPasswordError] = useState('');\r\n//\r\n//     const validateEmail = () => {\r\n//         const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n//         if (!emailPattern.test(email)) {\r\n//             setEmailError('Please enter a valid email address');\r\n//             return false;\r\n//         }\r\n//         return true;\r\n//     };\r\n//\r\n//     const handleLogin = (e) => {\r\n//         e.preventDefault();\r\n//         // Reset previous validation errors\r\n//         setEmailError('');\r\n//         setPasswordError('');\r\n//\r\n//         // Perform validation\r\n//         let isValid = true;\r\n//\r\n//         // Validate email\r\n//         isValid = validateEmail() && isValid;\r\n//\r\n//         if (!password.trim()) {\r\n//             setPasswordError('Password is required');\r\n//             isValid = false;\r\n//         }\r\n//\r\n//         // If form is valid, proceed with login\r\n//         if (isValid) {\r\n//             // Here you can add your authentication logic\r\n//             // For simplicity, just redirect to another page after login\r\n//             navigate('/dashboard');\r\n//         }\r\n//     };"],"mappings":"AAAA,MAAO,CAAAA,WAAW,KAAM,2BAA2B,CACnD,MAAO,iBAAiB,CACxB,OAAQC,QAAQ,KAAO,OAAO,CAC9B,OAAQC,IAAI,CAAEC,WAAW,KAAO,kBAAkB,CAClD,OAAQC,OAAO,KAAO,qBAAqB,CAC3C,MAAO,CAAAC,OAAO,KAAM,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhC,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CAEpB,KAAM,CAAAC,QAAQ,CAAGR,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAES,KAAM,CAAC,CAAGR,OAAO,CAAC,CAAC,CAE3B,KAAM,CAACS,SAAS,CAAEC,YAAY,CAAC,CAAGb,QAAQ,CAAC,CACvCc,KAAK,CAAE,EAAE,CACTC,QAAQ,CAAE,EACd,CAAC,CAAC,CACF,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAGxC,KAAM,CAAAkB,aAAa,CAAGA,CAACC,SAAS,CAAEC,KAAK,GAAK,CACxC,KAAM,CAAAC,YAAY,CAAG,iCAAiC,CAEtD,OAAQF,SAAS,EACb,IAAK,OAAO,CACR,MAAO,CAAAE,YAAY,CAACC,IAAI,CAACF,KAAK,CAAC,CAAG,EAAE,CAAG,oCAAoC,CAC/E,IAAK,UAAU,CACX,MAAO,CAAAA,KAAK,CAACG,MAAM,EAAI,CAAC,CAAG,EAAE,CAAG,6CAA6C,CACjF,QACI,MAAO,EAAE,CACjB,CACJ,CAAC,CAED,KAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,CAAC,EAAK,CAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClBT,SAAS,CAAC,CAAC,CAAC,CAAC,CAEb,KAAM,CAAAU,gBAAgB,CAAG,CAAC,OAAO,CAAE,UAAU,CAAC,CAC9C,KAAM,CAAAC,SAAS,CAAG,CAAC,CAAC,CACpB,GAAI,CAAAC,OAAO,CAAG,IAAI,CAElBF,gBAAgB,CAACG,OAAO,CAACX,SAAS,EAAI,CAClC,KAAM,CAAAY,UAAU,CAAGb,aAAa,CAACC,SAAS,CAAEP,SAAS,CAACO,SAAS,CAAC,CAAC,CACjE,GAAIY,UAAU,CAAE,CACZH,SAAS,CAACT,SAAS,CAAC,CAAGY,UAAU,CACjCF,OAAO,CAAG,KAAK,CACnB,CACJ,CAAC,CAAC,CAEF,GAAIA,OAAO,CAAE,CACT,GAAI,CACA,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,6BAA6B,CAAE,CACxDC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC1B,SAAS,CAClC,CAAC,CAAC,CAEF,GAAIoB,QAAQ,CAACO,EAAE,CAAE,CACb,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CACjBE,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAC/B,KAAM,CAAAC,eAAe,CAAGxC,OAAO,CAACyC,GAAG,CAAC,YAAY,CAAC,CAEjD;AACAH,OAAO,CAACC,GAAG,CAACC,eAAe,CAAC,CAC5BjC,KAAK,CAAC6B,IAAI,CAACM,KAAK,CAAC,CACjBpC,QAAQ,CAAC,GAAG,CAAC,CACjB,CAAC,IAAM,CACH,KAAM,CAAAqC,SAAS,CAAG,KAAM,CAAAf,QAAQ,CAACS,IAAI,CAAC,CAAC,CACvCC,OAAO,CAACM,KAAK,CAAC,eAAe,CAAED,SAAS,CAAC,CACzC,KAAM,CAAAE,eAAe,CAAG,CAAC,CAAC,CAC1BF,SAAS,CAACjB,OAAO,CAACkB,KAAK,EAAI,CACvBC,eAAe,CAACD,KAAK,CAACE,KAAK,CAAC,CAAGF,KAAK,CAACG,cAAc,CACvD,CAAC,CAAC,CACFlC,SAAS,CAACgC,eAAe,CAAC,CAC1BP,OAAO,CAACC,GAAG,CAACM,eAAe,CAAC,CAChC,CACJ,CAAE,MAAOD,KAAK,CAAE,CACZN,OAAO,CAACM,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC9C,CACJ,CAAC,IAAM,CACH/B,SAAS,CAACW,SAAS,CAAC,CACxB,CACJ,CAAC,CAED,KAAM,CAAAwB,YAAY,CAAGA,CAACjC,SAAS,CAAEC,KAAK,GAAK,CACvCP,YAAY,CAACwC,SAAS,GAAK,CACvB,GAAGA,SAAS,CACZ,CAAClC,SAAS,EAAGC,KACjB,CAAC,CAAC,CAAC,CACP,CAAC,CAED,mBACIZ,KAAA,QAAK8C,SAAS,CAAC,sBAAsB,CAAAC,QAAA,eACjCjD,IAAA,OAAAiD,QAAA,CAAI,OAAK,CAAI,CAAC,cACd/C,KAAA,SAAMgD,QAAQ,CAAEhC,YAAa,CAAA+B,QAAA,eACzBjD,IAAA,UACImD,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,OAAO,CACnBtC,KAAK,CAAER,SAAS,CAACE,KAAM,CACvB6C,QAAQ,CAAGlC,CAAC,EAAK2B,YAAY,CAAC,OAAO,CAAE3B,CAAC,CAACmC,MAAM,CAACxC,KAAK,CAAE,CAC1D,CAAC,CACDJ,MAAM,CAACF,KAAK,eAAIR,IAAA,QAAKgD,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAEvC,MAAM,CAACF,KAAK,CAAM,CAAC,cACpER,IAAA,UACImD,IAAI,CAAC,UAAU,CACfC,WAAW,CAAC,UAAU,CACtBtC,KAAK,CAAER,SAAS,CAACG,QAAS,CAC1B4C,QAAQ,CAAGlC,CAAC,EAAK2B,YAAY,CAAC,UAAU,CAAE3B,CAAC,CAACmC,MAAM,CAACxC,KAAK,CAAE,CAC7D,CAAC,CACDJ,MAAM,CAACD,QAAQ,eAAIT,IAAA,QAAKgD,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAEvC,MAAM,CAACD,QAAQ,CAAM,CAAC,cAC1ET,IAAA,CAACP,WAAW,GAAE,CAAC,EACb,CAAC,cACPS,KAAA,QAAK8C,SAAS,CAAE,4BAA6B,CAAAC,QAAA,eACzCjD,IAAA,MAAAiD,QAAA,CAAG,MAAI,CAAG,CAAC,cACXjD,IAAA,CAACL,IAAI,EAAC4D,EAAE,CAAE,WAAY,CAAAN,QAAA,CAAC,eAAa,CAAM,CAAC,EAC1C,CAAC,EACL,CAAC,CAEd,CAAC,CAED,cAAe,CAAA9C,SAAS,CAIxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}