{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kruse\\\\Downloads\\\\Spring-Security-React-App\\\\Spring-Security-React-App\\\\frontend\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [token, setToken] = useState(() => localStorage.getItem('auth_token'));\n  const login = newToken => {\n    localStorage.setItem('auth_token', newToken);\n    setToken(newToken);\n  };\n  const logout = () => {\n    localStorage.removeItem('auth_token');\n    setToken(null);\n  };\n  const isAuthenticated = () => {\n    // Check if token exists\n    if (!token) {\n      return false;\n    }\n\n    // Check if token is expired\n    const decodedToken = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n    if (decodedToken.exp < currentTime) {\n      // Token is expired\n      logout();\n      return false;\n    }\n    if (decoded.role == \"ADMIN\") {\n      setIsAdmin(true);\n    } else {\n      setIsAdmin(false);\n    }\n    return true;\n  };\n  const value = {\n    token,\n    login,\n    logout,\n    isAuthenticated\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 12\n  }, this);\n};\n_s2(AuthProvider, \"mZc2xIvPKTo7LrCAwJMfirrU2z4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jwtDecode","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","token","setToken","localStorage","getItem","login","newToken","setItem","logout","removeItem","isAuthenticated","decodedToken","currentTime","Date","now","exp","decoded","role","setIsAdmin","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kruse/Downloads/Spring-Security-React-App/Spring-Security-React-App/frontend/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [token, setToken] = useState(() => localStorage.getItem('auth_token'));\r\n\r\n    const login = (newToken) => {\r\n        localStorage.setItem('auth_token', newToken);\r\n        setToken(newToken);\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('auth_token');\r\n        setToken(null);\r\n    };\r\n\r\n    const isAuthenticated = () => {\r\n        // Check if token exists\r\n        if (!token) {\r\n            return false;\r\n        }\r\n\r\n        // Check if token is expired\r\n        const decodedToken = jwtDecode(token);\r\n        const currentTime = Date.now() / 1000;\r\n        if (decodedToken.exp < currentTime) {\r\n            // Token is expired\r\n            logout();\r\n            return false;\r\n        }\r\n        if (decoded.role == \"ADMIN\") {\r\n            setIsAdmin(true);\r\n        } else {\r\n            setIsAdmin(false);\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const value = {\r\n        token,\r\n        login,\r\n        logout,\r\n        isAuthenticated,\r\n    };\r\n\r\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAAQC,SAAS,QAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,MAAMY,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;EAE5E,MAAMC,KAAK,GAAIC,QAAQ,IAAK;IACxBH,YAAY,CAACI,OAAO,CAAC,YAAY,EAAED,QAAQ,CAAC;IAC5CJ,QAAQ,CAACI,QAAQ,CAAC;EACtB,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACjBL,YAAY,CAACM,UAAU,CAAC,YAAY,CAAC;IACrCP,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMQ,eAAe,GAAGA,CAAA,KAAM;IAC1B;IACA,IAAI,CAACT,KAAK,EAAE;MACR,OAAO,KAAK;IAChB;;IAEA;IACA,MAAMU,YAAY,GAAGnB,SAAS,CAACS,KAAK,CAAC;IACrC,MAAMW,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IACrC,IAAIH,YAAY,CAACI,GAAG,GAAGH,WAAW,EAAE;MAChC;MACAJ,MAAM,CAAC,CAAC;MACR,OAAO,KAAK;IAChB;IACA,IAAIQ,OAAO,CAACC,IAAI,IAAI,OAAO,EAAE;MACzBC,UAAU,CAAC,IAAI,CAAC;IACpB,CAAC,MAAM;MACHA,UAAU,CAAC,KAAK,CAAC;IACrB;IACA,OAAO,IAAI;EACf,CAAC;EAED,MAAMC,KAAK,GAAG;IACVlB,KAAK;IACLI,KAAK;IACLG,MAAM;IACNE;EACJ,CAAC;EAED,oBAAOhB,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApB,QAAA,EAAEA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAChF,CAAC;AAACxB,GAAA,CA3CWF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}