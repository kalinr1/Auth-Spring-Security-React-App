{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kruse\\\\Downloads\\\\Spring-Security-React-App\\\\Spring-Security-React-App\\\\frontend\\\\src\\\\auth\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jwtDecode } from \"jwt-decode\";\nimport Cookies from \"js-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [token, setToken] = useState(() => {\n    return Cookies.get('auth_token') || null;\n  });\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  useEffect(() => {\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token);\n        const currentTime = Date.now() / 1000;\n        if (decodedToken.exp > currentTime) {\n          setIsAuthenticated(true);\n        }\n        setIsAdmin(decodedToken.role === 'ADMIN');\n      } catch (error) {\n        logout();\n      }\n    }\n  }, [token]);\n  const login = newToken => {\n    try {\n      const decodedToken = jwtDecode(newToken);\n      document.cookie = `auth_token=${newToken}; Path=/; Secure; SameSite=Strict`;\n      setToken(newToken);\n      setIsAuthenticated(true);\n      setIsAdmin(decodedToken.role === 'ADMIN');\n    } catch (error) {\n      console.error(\"Invalid token on login\", error);\n    }\n  };\n  const logout = () => {\n    document.cookie = 'auth_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Secure; SameSite=Strict';\n    setToken(null);\n    setIsAuthenticated(false);\n    setIsAdmin(false);\n  };\n  const value = {\n    token,\n    login,\n    logout,\n    isAuthenticated,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 12\n  }, this);\n};\n\n//import React, { createContext, useContext, useEffect, useState } from 'react';\n// import {jwtDecode} from \"jwt-decode\";\n// import Cookies from \"js-cookie\";\n//\n// const AuthContext = createContext();\n//\n// export const useAuth = () => useContext(AuthContext);\n//\n// export const AuthProvider = ({ children }) => {\n//     const [token, setToken] = useState(() => {\n//         return Cookies.get('auth_token') || null;\n//     });\n//     const [isAdmin, setIsAdmin] = useState(false);\n//\n//     useEffect(() => {\n//         if (token) {\n//             try {\n//                 const decodedToken = jwtDecode(token);\n//                 setIsAdmin(decodedToken.role === 'ADMIN');\n//             } catch (error) {\n//                 logout();\n//             }\n//         }\n//     }, [token]);\n//\n//     const login = (newToken) => {\n//         try {\n//             const decodedToken = jwtDecode(newToken);\n//             document.cookie = `auth_token=${newToken}; Path=/; Secure; SameSite=Strict`;\n//             setToken(newToken);\n//             setIsAdmin(decodedToken.role === 'ADMIN');\n//\n//         } catch (error) {\n//             console.error(\"Invalid token on login\", error);\n//         }\n//     };\n//\n//     const logout = () => {\n//         document.cookie = 'auth_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Secure; SameSite=Strict';\n//         setToken(null);\n//         setIsAdmin(false);\n//     };\n//\n//     const isAuthenticated = () => {\n//         if (!token) {\n//             return false;\n//         }\n//\n//         try {\n//             const decodedToken = jwtDecode(token);\n//             const currentTime = Date.now() / 1000;\n//             if (decodedToken.exp < currentTime) {\n//                 logout();\n//                 return false;\n//             }\n//             return true;\n//         } catch (error) {\n//             console.error(\"Invalid token during authentication check\", error);\n//             logout();\n//             return false;\n//         }\n//     };\n//\n//     const value = {\n//         token,\n//         login,\n//         logout,\n//         isAuthenticated,\n//         isAdmin\n//     };\n//\n//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n// };\n_s2(AuthProvider, \"NtFI2Q5wbk6Fm1pR5YiXh0CNSQM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jwtDecode","Cookies","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","token","setToken","get","isAuthenticated","setIsAuthenticated","isAdmin","setIsAdmin","decodedToken","currentTime","Date","now","exp","role","error","logout","login","newToken","document","cookie","console","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kruse/Downloads/Spring-Security-React-App/Spring-Security-React-App/frontend/src/auth/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [token, setToken] = useState(() => {\r\n        return Cookies.get('auth_token') || null;\r\n    });\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            try {\r\n                const decodedToken = jwtDecode(token);\r\n\r\n                const currentTime = Date.now() / 1000;\r\n                if (decodedToken.exp > currentTime) {\r\n                    setIsAuthenticated(true);\r\n                }\r\n                setIsAdmin(decodedToken.role === 'ADMIN');\r\n            } catch (error) {\r\n                logout();\r\n            }\r\n        }\r\n    }, [token]);\r\n\r\n    const login = (newToken) => {\r\n        try {\r\n            const decodedToken = jwtDecode(newToken);\r\n            document.cookie = `auth_token=${newToken}; Path=/; Secure; SameSite=Strict`;\r\n            setToken(newToken);\r\n            setIsAuthenticated(true);\r\n            setIsAdmin(decodedToken.role === 'ADMIN');\r\n\r\n        } catch (error) {\r\n            console.error(\"Invalid token on login\", error);\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        document.cookie = 'auth_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Secure; SameSite=Strict';\r\n        setToken(null);\r\n        setIsAuthenticated(false);\r\n        setIsAdmin(false);\r\n    };\r\n\r\n\r\n    const value = {\r\n        token,\r\n        login,\r\n        logout,\r\n        isAuthenticated,\r\n        isAdmin\r\n    };\r\n\r\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n\r\n\r\n//import React, { createContext, useContext, useEffect, useState } from 'react';\r\n// import {jwtDecode} from \"jwt-decode\";\r\n// import Cookies from \"js-cookie\";\r\n//\r\n// const AuthContext = createContext();\r\n//\r\n// export const useAuth = () => useContext(AuthContext);\r\n//\r\n// export const AuthProvider = ({ children }) => {\r\n//     const [token, setToken] = useState(() => {\r\n//         return Cookies.get('auth_token') || null;\r\n//     });\r\n//     const [isAdmin, setIsAdmin] = useState(false);\r\n//\r\n//     useEffect(() => {\r\n//         if (token) {\r\n//             try {\r\n//                 const decodedToken = jwtDecode(token);\r\n//                 setIsAdmin(decodedToken.role === 'ADMIN');\r\n//             } catch (error) {\r\n//                 logout();\r\n//             }\r\n//         }\r\n//     }, [token]);\r\n//\r\n//     const login = (newToken) => {\r\n//         try {\r\n//             const decodedToken = jwtDecode(newToken);\r\n//             document.cookie = `auth_token=${newToken}; Path=/; Secure; SameSite=Strict`;\r\n//             setToken(newToken);\r\n//             setIsAdmin(decodedToken.role === 'ADMIN');\r\n//\r\n//         } catch (error) {\r\n//             console.error(\"Invalid token on login\", error);\r\n//         }\r\n//     };\r\n//\r\n//     const logout = () => {\r\n//         document.cookie = 'auth_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Secure; SameSite=Strict';\r\n//         setToken(null);\r\n//         setIsAdmin(false);\r\n//     };\r\n//\r\n//     const isAuthenticated = () => {\r\n//         if (!token) {\r\n//             return false;\r\n//         }\r\n//\r\n//         try {\r\n//             const decodedToken = jwtDecode(token);\r\n//             const currentTime = Date.now() / 1000;\r\n//             if (decodedToken.exp < currentTime) {\r\n//                 logout();\r\n//                 return false;\r\n//             }\r\n//             return true;\r\n//         } catch (error) {\r\n//             console.error(\"Invalid token during authentication check\", error);\r\n//             logout();\r\n//             return false;\r\n//         }\r\n//     };\r\n//\r\n//     const value = {\r\n//         token,\r\n//         login,\r\n//         logout,\r\n//         isAuthenticated,\r\n//         isAdmin\r\n//     };\r\n//\r\n//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n// };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}