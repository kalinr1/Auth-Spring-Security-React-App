{"ast":null,"code":"// import React, {createContext, useContext, useEffect, useState} from 'react';\n// import {jwtDecode} from \"jwt-decode\";\n// import Cookies from \"js-cookie\";\n//\n// const AuthContext = createContext();\n//\n// export const useAuth = () => useContext(AuthContext);\n//\n// export const AuthProvider = ({ children }) => {\n//     const [token, setToken] = useState(() => {\n//         return Cookies.get('auth_token') || \"GAY\";\n//     });\n//     const [isAdmin, setIsAdmin] = useState(false);\n//\n//     useEffect(() => {\n//         // Decode the token to check if the user is an admin\n//         if (token !== null) {\n//             const decodedToken = jwtDecode(token);\n//             setIsAdmin(decodedToken.role === 'ADMIN');\n//         }\n//     }, [token]);\n//     const login = (newToken) => {\n//         document.cookie = `auth_token=${newToken}; Path=/; Secure; SameSite=Strict`;\n//         setToken(newToken);\n//         const decodedToken = jwtDecode(newToken);\n//         setIsAdmin(decodedToken.role === 'ADMIN');\n//     };\n//\n//     const logout = () => {\n//         document.cookie = 'auth_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Secure; SameSite=Strict';\n//         setToken(\"gay\");\n//         setIsAdmin(false);\n//     };\n//\n//     const isAuthenticated = () => {\n//         if (!token) {\n//             return false;\n//         }\n//\n//         const decodedToken = jwtDecode(token);\n//         const currentTime = Date.now() / 1000;\n//         if (decodedToken.exp < currentTime) {\n//             // Token is expired\n//             logout();\n//             return false;\n//         }\n//\n//         return true;\n//     };\n//\n//     const value = {\n//         token,\n//         login,\n//         logout,\n//         isAuthenticated,\n//         isAdmin\n//     };\n//\n//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n// };","map":{"version":3,"names":[],"sources":["C:/Users/kruse/Downloads/Spring-Security-React-App/Spring-Security-React-App/frontend/src/auth/AuthContext.js"],"sourcesContent":["// import React, {createContext, useContext, useEffect, useState} from 'react';\r\n// import {jwtDecode} from \"jwt-decode\";\r\n// import Cookies from \"js-cookie\";\r\n//\r\n// const AuthContext = createContext();\r\n//\r\n// export const useAuth = () => useContext(AuthContext);\r\n//\r\n// export const AuthProvider = ({ children }) => {\r\n//     const [token, setToken] = useState(() => {\r\n//         return Cookies.get('auth_token') || \"GAY\";\r\n//     });\r\n//     const [isAdmin, setIsAdmin] = useState(false);\r\n//\r\n//     useEffect(() => {\r\n//         // Decode the token to check if the user is an admin\r\n//         if (token !== null) {\r\n//             const decodedToken = jwtDecode(token);\r\n//             setIsAdmin(decodedToken.role === 'ADMIN');\r\n//         }\r\n//     }, [token]);\r\n//     const login = (newToken) => {\r\n//         document.cookie = `auth_token=${newToken}; Path=/; Secure; SameSite=Strict`;\r\n//         setToken(newToken);\r\n//         const decodedToken = jwtDecode(newToken);\r\n//         setIsAdmin(decodedToken.role === 'ADMIN');\r\n//     };\r\n//\r\n//     const logout = () => {\r\n//         document.cookie = 'auth_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Secure; SameSite=Strict';\r\n//         setToken(\"gay\");\r\n//         setIsAdmin(false);\r\n//     };\r\n//\r\n//     const isAuthenticated = () => {\r\n//         if (!token) {\r\n//             return false;\r\n//         }\r\n//\r\n//         const decodedToken = jwtDecode(token);\r\n//         const currentTime = Date.now() / 1000;\r\n//         if (decodedToken.exp < currentTime) {\r\n//             // Token is expired\r\n//             logout();\r\n//             return false;\r\n//         }\r\n//\r\n//         return true;\r\n//     };\r\n//\r\n//     const value = {\r\n//         token,\r\n//         login,\r\n//         logout,\r\n//         isAuthenticated,\r\n//         isAdmin\r\n//     };\r\n//\r\n//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n// };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}