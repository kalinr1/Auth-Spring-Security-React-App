{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kruse\\\\Downloads\\\\Spring-Security-React-App\\\\Spring-Security-React-App\\\\frontend\\\\src\\\\auth\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  // useEffect(() => {\n  //     const checkAuthToken = async () => {\n  //         try {\n  //             const response = await fetch('/api/check-token', {\n  //                 method: 'GET',\n  //                 credentials: 'include', // Include cookies in the request\n  //             });\n  //             if (!response.ok) {\n  //                 throw new Error('Token check failed');\n  //             }\n  //             const data = await response.json();\n  //             const { token } = data;\n  //             const decodedToken = jwtDecode(token);\n  //             setIsAuthenticated(true);\n  //             setIsAdmin(decodedToken.role === 'ADMIN');\n  //         } catch (error) {\n  //             setIsAuthenticated(false);\n  //             setIsAdmin(false);\n  //         }\n  //     };\n  //\n  //     checkAuthToken();\n  // }, []);\n\n  const login = async credentials => {\n    try {\n      const response = await fetch('/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials),\n        credentials: 'include' // Include cookies in the request\n      });\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      setIsAuthenticated(true);\n\n      // Verify the token after login\n      const checkTokenResponse = await fetch('/api/check-token', {\n        method: 'GET',\n        credentials: 'include' // Include cookies in the request\n      });\n      if (!checkTokenResponse.ok) {\n        throw new Error('Token check failed');\n      }\n      const data = await checkTokenResponse.json();\n      const {\n        token\n      } = data;\n      const decodedToken = jwtDecode(token);\n      setIsAdmin(decodedToken.role === 'ADMIN');\n    } catch (error) {\n      console.error('Login failed', error);\n      setIsAuthenticated(false);\n      setIsAdmin(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      const response = await fetch('/logout', {\n        method: 'POST',\n        credentials: 'include' // Include cookies in the request\n      });\n      if (!response.ok) {\n        throw new Error('Logout failed');\n      }\n      setIsAuthenticated(false);\n      setIsAdmin(false);\n    } catch (error) {\n      console.error('Logout failed', error);\n    }\n  };\n  const value = {\n    isAuthenticated,\n    login,\n    logout,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 12\n  }, this);\n};\n\n//const AuthContext = createContext();\n//\n// export const useAuth = () => useContext(AuthContext);\n//\n// export const AuthProvider = ({ children }) => {\n//     const [token, setToken] = useState(() => localStorage.getItem('auth_token'));\n//     const [isAdmin, setIsAdmin] = useState(false);\n//\n//     const login = (newToken) => {\n//         localStorage.setItem('auth_token', newToken);\n//         setToken(newToken);\n//         const decodedToken = jwtDecode(newToken);\n//         setIsAdmin(decodedToken.role === 'ADMIN');\n//     };\n//\n//     const logout = () => {\n//         localStorage.removeItem('auth_token');\n//         setToken(null);\n//         setIsAdmin(false)\n//     };\n//\n//     const isAuthenticated = () => {\n//         // Check if token exists\n//         if (!token) {\n//             return false;\n//         }\n//\n//         // Check if token is expired\n//         const decodedToken = jwtDecode(token);\n//         const currentTime = Date.now() / 1000;\n//         if (decodedToken.exp < currentTime) {\n//             // Token is expired\n//             logout();\n//             return false;\n//         }\n//\n//         return true;\n//     };\n//\n//     const value = {\n//         token,\n//         login,\n//         logout,\n//         isAuthenticated,\n//         isAdmin\n//     };\n//\n//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n// };\n_s2(AuthProvider, \"nKGgkSWR2RytQzWO5Yy88bKIcEA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","isAdmin","setIsAdmin","login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","Error","checkTokenResponse","data","json","token","decodedToken","role","error","console","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kruse/Downloads/Spring-Security-React-App/Spring-Security-React-App/frontend/src/auth/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n    // useEffect(() => {\r\n    //     const checkAuthToken = async () => {\r\n    //         try {\r\n    //             const response = await fetch('/api/check-token', {\r\n    //                 method: 'GET',\r\n    //                 credentials: 'include', // Include cookies in the request\r\n    //             });\r\n    //             if (!response.ok) {\r\n    //                 throw new Error('Token check failed');\r\n    //             }\r\n    //             const data = await response.json();\r\n    //             const { token } = data;\r\n    //             const decodedToken = jwtDecode(token);\r\n    //             setIsAuthenticated(true);\r\n    //             setIsAdmin(decodedToken.role === 'ADMIN');\r\n    //         } catch (error) {\r\n    //             setIsAuthenticated(false);\r\n    //             setIsAdmin(false);\r\n    //         }\r\n    //     };\r\n    //\r\n    //     checkAuthToken();\r\n    // }, []);\r\n\r\n    const login = async (credentials) => {\r\n        try {\r\n            const response = await fetch('/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(credentials),\r\n                credentials: 'include', // Include cookies in the request\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Login failed');\r\n            }\r\n            setIsAuthenticated(true);\r\n\r\n            // Verify the token after login\r\n            const checkTokenResponse = await fetch('/api/check-token', {\r\n                method: 'GET',\r\n                credentials: 'include', // Include cookies in the request\r\n            });\r\n            if (!checkTokenResponse.ok) {\r\n                throw new Error('Token check failed');\r\n            }\r\n            const data = await checkTokenResponse.json();\r\n            const { token } = data;\r\n            const decodedToken = jwtDecode(token);\r\n            setIsAdmin(decodedToken.role === 'ADMIN');\r\n        } catch (error) {\r\n            console.error('Login failed', error);\r\n            setIsAuthenticated(false);\r\n            setIsAdmin(false);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        try {\r\n            const response = await fetch('/logout', {\r\n                method: 'POST',\r\n                credentials: 'include', // Include cookies in the request\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Logout failed');\r\n            }\r\n            setIsAuthenticated(false);\r\n            setIsAdmin(false);\r\n        } catch (error) {\r\n            console.error('Logout failed', error);\r\n        }\r\n    };\r\n\r\n    const value = {\r\n        isAuthenticated,\r\n        login,\r\n        logout,\r\n        isAdmin,\r\n    };\r\n\r\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n\r\n//const AuthContext = createContext();\r\n//\r\n// export const useAuth = () => useContext(AuthContext);\r\n//\r\n// export const AuthProvider = ({ children }) => {\r\n//     const [token, setToken] = useState(() => localStorage.getItem('auth_token'));\r\n//     const [isAdmin, setIsAdmin] = useState(false);\r\n//\r\n//     const login = (newToken) => {\r\n//         localStorage.setItem('auth_token', newToken);\r\n//         setToken(newToken);\r\n//         const decodedToken = jwtDecode(newToken);\r\n//         setIsAdmin(decodedToken.role === 'ADMIN');\r\n//     };\r\n//\r\n//     const logout = () => {\r\n//         localStorage.removeItem('auth_token');\r\n//         setToken(null);\r\n//         setIsAdmin(false)\r\n//     };\r\n//\r\n//     const isAuthenticated = () => {\r\n//         // Check if token exists\r\n//         if (!token) {\r\n//             return false;\r\n//         }\r\n//\r\n//         // Check if token is expired\r\n//         const decodedToken = jwtDecode(token);\r\n//         const currentTime = Date.now() / 1000;\r\n//         if (decodedToken.exp < currentTime) {\r\n//             // Token is expired\r\n//             logout();\r\n//             return false;\r\n//         }\r\n//\r\n//         return true;\r\n//     };\r\n//\r\n//     const value = {\r\n//         token,\r\n//         login,\r\n//         logout,\r\n//         isAuthenticated,\r\n//         isAdmin\r\n//     };\r\n//\r\n//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n// };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}