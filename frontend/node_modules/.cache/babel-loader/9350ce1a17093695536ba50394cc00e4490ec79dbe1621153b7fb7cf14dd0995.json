{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kruse\\\\Downloads\\\\Spring-Security-React-App\\\\Spring-Security-React-App\\\\frontend\\\\src\\\\auth\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jwtDecode } from \"jwt-decode\";\nimport apiClient from \"./apiClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  useEffect(() => {\n    // Function to check the auth token\n    const checkAuthToken = async () => {\n      try {\n        const response = await apiClient.get('/api/check-token'); // Endpoint to verify token validity\n        const {\n          token\n        } = response.data;\n        const decodedToken = jwtDecode(token);\n        setIsAuthenticated(true);\n        setIsAdmin(decodedToken.role === 'ADMIN');\n      } catch (error) {\n        setIsAuthenticated(false);\n        setIsAdmin(false);\n      }\n    };\n    checkAuthToken();\n  }, []);\n  const login = async credentials => {\n    try {\n      await apiClient.post('/login', credentials);\n      setIsAuthenticated(true);\n      // The token will be automatically included in subsequent requests due to HttpOnly cookie\n      const response = await apiClient.get('/api/check-token');\n      const {\n        token\n      } = response.data;\n      const decodedToken = jwtDecode(token);\n      setIsAdmin(decodedToken.role === 'ADMIN');\n    } catch (error) {\n      console.error('Login failed', error);\n      setIsAuthenticated(false);\n      setIsAdmin(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      await apiClient.post('/logout');\n      setIsAuthenticated(false);\n      setIsAdmin(false);\n    } catch (error) {\n      console.error('Logout failed', error);\n    }\n  };\n  const value = {\n    isAuthenticated,\n    login,\n    logout,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 12\n  }, this);\n};\n\n//const AuthContext = createContext();\n//\n// export const useAuth = () => useContext(AuthContext);\n//\n// export const AuthProvider = ({ children }) => {\n//     const [token, setToken] = useState(() => localStorage.getItem('auth_token'));\n//     const [isAdmin, setIsAdmin] = useState(false);\n//\n//     const login = (newToken) => {\n//         localStorage.setItem('auth_token', newToken);\n//         setToken(newToken);\n//         const decodedToken = jwtDecode(newToken);\n//         setIsAdmin(decodedToken.role === 'ADMIN');\n//     };\n//\n//     const logout = () => {\n//         localStorage.removeItem('auth_token');\n//         setToken(null);\n//         setIsAdmin(false)\n//     };\n//\n//     const isAuthenticated = () => {\n//         // Check if token exists\n//         if (!token) {\n//             return false;\n//         }\n//\n//         // Check if token is expired\n//         const decodedToken = jwtDecode(token);\n//         const currentTime = Date.now() / 1000;\n//         if (decodedToken.exp < currentTime) {\n//             // Token is expired\n//             logout();\n//             return false;\n//         }\n//\n//         return true;\n//     };\n//\n//     const value = {\n//         token,\n//         login,\n//         logout,\n//         isAuthenticated,\n//         isAdmin\n//     };\n//\n//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n// };\n_s2(AuthProvider, \"wqYoM5Zkli0xb0Rjmti0YIIgN1M=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jwtDecode","apiClient","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","isAdmin","setIsAdmin","checkAuthToken","response","get","token","data","decodedToken","role","error","login","credentials","post","console","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kruse/Downloads/Spring-Security-React-App/Spring-Security-React-App/frontend/src/auth/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport apiClient from \"./apiClient\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Function to check the auth token\r\n        const checkAuthToken = async () => {\r\n            try {\r\n                const response = await apiClient.get('/api/check-token'); // Endpoint to verify token validity\r\n                const { token } = response.data;\r\n                const decodedToken = jwtDecode(token);\r\n                setIsAuthenticated(true);\r\n                setIsAdmin(decodedToken.role === 'ADMIN');\r\n            } catch (error) {\r\n                setIsAuthenticated(false);\r\n                setIsAdmin(false);\r\n            }\r\n        };\r\n\r\n        checkAuthToken();\r\n    }, []);\r\n\r\n    const login = async (credentials) => {\r\n        try {\r\n            await apiClient.post('/login', credentials);\r\n            setIsAuthenticated(true);\r\n            // The token will be automatically included in subsequent requests due to HttpOnly cookie\r\n            const response = await apiClient.get('/api/check-token');\r\n            const { token } = response.data;\r\n            const decodedToken = jwtDecode(token);\r\n            setIsAdmin(decodedToken.role === 'ADMIN');\r\n        } catch (error) {\r\n            console.error('Login failed', error);\r\n            setIsAuthenticated(false);\r\n            setIsAdmin(false);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        try {\r\n            await apiClient.post('/logout');\r\n            setIsAuthenticated(false);\r\n            setIsAdmin(false);\r\n        } catch (error) {\r\n            console.error('Logout failed', error);\r\n        }\r\n    };\r\n\r\n    const value = {\r\n        isAuthenticated,\r\n        login,\r\n        logout,\r\n        isAdmin,\r\n    };\r\n\r\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n//const AuthContext = createContext();\r\n//\r\n// export const useAuth = () => useContext(AuthContext);\r\n//\r\n// export const AuthProvider = ({ children }) => {\r\n//     const [token, setToken] = useState(() => localStorage.getItem('auth_token'));\r\n//     const [isAdmin, setIsAdmin] = useState(false);\r\n//\r\n//     const login = (newToken) => {\r\n//         localStorage.setItem('auth_token', newToken);\r\n//         setToken(newToken);\r\n//         const decodedToken = jwtDecode(newToken);\r\n//         setIsAdmin(decodedToken.role === 'ADMIN');\r\n//     };\r\n//\r\n//     const logout = () => {\r\n//         localStorage.removeItem('auth_token');\r\n//         setToken(null);\r\n//         setIsAdmin(false)\r\n//     };\r\n//\r\n//     const isAuthenticated = () => {\r\n//         // Check if token exists\r\n//         if (!token) {\r\n//             return false;\r\n//         }\r\n//\r\n//         // Check if token is expired\r\n//         const decodedToken = jwtDecode(token);\r\n//         const currentTime = Date.now() / 1000;\r\n//         if (decodedToken.exp < currentTime) {\r\n//             // Token is expired\r\n//             logout();\r\n//             return false;\r\n//         }\r\n//\r\n//         return true;\r\n//     };\r\n//\r\n//     const value = {\r\n//         token,\r\n//         login,\r\n//         logout,\r\n//         isAuthenticated,\r\n//         isAdmin\r\n//     };\r\n//\r\n//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n// };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}